
# The source stage will contain only the necessary source code
FROM node:18.14-alpine AS source

# WORKDIR doesn't need to be fancy, but it needs to be consistent
WORKDIR /app

# Putting this first enables us to change code files without having to rerun the
# next step to install dependencies. Dependencies only get reinstalled if one of
# these files changes.
COPY --chown=node:node *.json yarn*.lock *config.js ./

# Bring in backend code
COPY --chown=node:node backend/core ./backend/core

# This is only needed for a single import in a single unit test
COPY --chown=node:node shared-helpers ./shared-helpers

# And this has to be brought in as a depency for shared-helpers
COPY --chown=node:node doorway-ui-components ./doorway-ui-components


#####################
##### NEW STAGE #####
#####################

# The deps stage installs full dependencies
FROM source AS deps

# Go deep into backend/core due to shared-helpers dependency
WORKDIR /app/backend/core

# Install dependencies
RUN yarn install --frozen-lockfile


#####################
##### NEW STAGE #####
#####################

# The test stage builds an image safe for running tests
FROM deps AS test

# Go deep into backend/core due to shared-helpers dependency
WORKDIR /app/backend/core

# When running this image, make sure to use the built-in node user
USER node

# This can be overridden with other test commands
CMD yarn test


#####################
##### NEW STAGE #####
#####################

# The build stage builds the code using the dependencies from the deps stage
FROM node:18.14-alpine AS build

# Start in the root
WORKDIR /app

# We have to copy over all of the files due to the way dependencies are scattered across directories
COPY --from=deps --chown=node:node /app .

# Go into backend/core to build
WORKDIR /app/backend/core

# Build the app
RUN yarn build


#####################
##### NEW STAGE #####
#####################

# The optimize stage contains only dependencies needed to run the service
FROM node:18.14-alpine AS optimize

# No need to keep nested dirs since shared-helpers is only needed for testing
WORKDIR /app

# Pull in package files again
COPY --from=source --chown=node:node \
    /app/backend/core/package*.json \
    /app/backend/core/tsconfig*.json ./

# Set the NODE_ENV variable
# Setting it to production can enable optimizations in code
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Reinstall only dependencies required to run the application
RUN yarn install --frozen-lockfile --only=production


#####################
##### NEW STAGE #####
#####################

# The run stage contains an optimized image for running the application
FROM node:18.14-alpine AS run

# No need to keep nested dirs since shared-helpers is only needed for testing
WORKDIR /app

# Pull in package files again
COPY --from=source --chown=node:node \
    /app/backend/core/package*.json \
    /app/backend/core/tsconfig*.json \
    /app/backend/core/ormconfig.* ./

# Add only dependencies required to run the application
COPY --from=optimize --chown=node:node /app/node_modules ./node_modules

# Add the compiled code from the build image
COPY --from=build --chown=node:node /app/backend/core/dist ./dist

# When running this image, make sure to use the built-in node user
USER node

CMD yarn start

#####################
##### NEW STAGE #####
#####################

# The run stage contains an optimized image for running the application
FROM run AS migrate

WORKDIR /app

# These parts have to be run as root
USER root

# yarn db commands require psql
RUN apk update
RUN apk add postgresql

# Add src and types so migrations can run
COPY --from=source --chown=node:node /app/backend/core/index.ts ./
COPY --from=source --chown=node:node /app/backend/core/src ./src
COPY --from=source --chown=node:node /app/backend/core/types ./types

## This CMD should be run as the node user
USER node

CMD yarn db:migration:run
